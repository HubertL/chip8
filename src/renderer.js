// Generated by CoffeeScript 1.11.0
(function() {
  'use strict';
  var Chip8Renderer;

  Chip8Renderer = function() {
    var draw, fragmentShaderSource, getShader, gl, initContext, initQuad, initShaders, initTexture, quadBuffer, setVideoData, shaderProgram, vertexPositionAttribute, vertexShaderSource, videoBuffer;
    gl = null;
    vertexPositionAttribute = null;
    shaderProgram = null;
    quadBuffer = null;
    videoBuffer = new Uint8Array(64 * 32 * 4);
    vertexShaderSource = "attribute vec3 position;\n\nvarying highp vec2 texCoord;\n\nvoid main(void) {\n  gl_Position = vec4(position, 1.0);\n  texCoord = (position.xy + 1.0) / 2.0;\n}";
    fragmentShaderSource = "varying highp vec2 texCoord;\n\nuniform sampler2D uSampler;\n\nvoid main(void) {\n  gl_FragColor = texture2D(uSampler, texCoord.st);\n}";
    initContext = function(canvas) {
      gl = canvas.getContext('webgl');
      gl.clearColor(0, 0, 0, 1);
      gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
      gl.viewport(0, 0, canvas.width, canvas.height);
      initShaders();
      initTexture(videoBuffer);
      initQuad();
    };
    getShader = function(type, source) {
      var shader;
      shader = gl.createShader(type);
      gl.shaderSource(shader, source);
      gl.compileShader(shader);
      return shader;
    };
    initShaders = function() {
      var fragmentShader, vertexShader;
      vertexShader = getShader(gl.VERTEX_SHADER, vertexShaderSource);
      fragmentShader = getShader(gl.FRAGMENT_SHADER, fragmentShaderSource);
      shaderProgram = gl.createProgram();
      gl.attachShader(shaderProgram, vertexShader);
      gl.attachShader(shaderProgram, fragmentShader);
      gl.linkProgram(shaderProgram);
      gl.useProgram(shaderProgram);
      vertexPositionAttribute = gl.getAttribLocation(shaderProgram, 'position');
      gl.enableVertexAttribArray(vertexPositionAttribute);
    };
    initQuad = function() {
      var vertices;
      quadBuffer = gl.createBuffer();
      gl.bindBuffer(gl.ARRAY_BUFFER, quadBuffer);
      vertices = new Float32Array([1, 1, 0, -1, 1, 0, 1, -1, 0, -1, -1, 0]);
      gl.bufferData(gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW);
      gl.vertexAttribPointer(vertexPositionAttribute, 3, gl.FLOAT, false, 0, 0);
    };
    initTexture = function(imageData) {
      var cubeTexture;
      cubeTexture = gl.createTexture();
      gl.bindTexture(gl.TEXTURE_2D, cubeTexture);
      gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, true);
      gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 64, 32, 0, gl.RGBA, gl.UNSIGNED_BYTE, imageData);
      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR_MIPMAP_NEAREST);
      gl.generateMipmap(gl.TEXTURE_2D);
      gl.activeTexture(gl.TEXTURE0);
      return gl.uniform1i(gl.getUniformLocation(shaderProgram, 'uSampler'), 0);
    };
    draw = function() {
      gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
      gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);
    };
    setVideoData = function(video) {
      var i, i4, j, ref;
      i4 = 0;
      for (i = j = 0, ref = video.length; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
        if (video[i]) {
          videoBuffer[i4 + 0] = 255;
          videoBuffer[i4 + 1] = 255;
          videoBuffer[i4 + 2] = 255;
        } else {
          videoBuffer[i4 + 0] = 0xC;
          videoBuffer[i4 + 1] = 0xD;
          videoBuffer[i4 + 2] = 0x8;
        }
        videoBuffer[i4 + 3] = 255;
        i4 += 4;
      }
      gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, 64, 32, gl.RGBA, gl.UNSIGNED_BYTE, videoBuffer);
    };
    return {
      initContext: initContext,
      setVideoData: setVideoData,
      draw: draw
    };
  };

  window.Chip8Renderer = Chip8Renderer;

}).call(this);
