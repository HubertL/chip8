// Generated by CoffeeScript 1.8.0
(function() {
  'use strict';
  var Range, app;

  Range = (ace.require('ace/range')).Range;

  app = angular.module('Assembler', []);

  app.controller('AssemblerController', [
    '$scope', '$http', function($scope, $http) {
      var TICKS_PER_FRAME, assembler, chip8, clearMarker, draw, editor, errorLine, getEmulatorState, initContext, keyboard, lineMapping, loadSample, marker, onChange, rafId, setVideoData, setupEditor, _ref;
      _ref = Chip8Renderer(), initContext = _ref.initContext, draw = _ref.draw, setVideoData = _ref.setVideoData;
      initContext(document.getElementById('can'));
      TICKS_PER_FRAME = 1;
      rafId = null;
      editor = null;
      errorLine = null;
      lineMapping = null;
      marker = null;
      this.status = 'idle';
      this.emulatorState = null;
      assembler = Chip8Assembler();
      keyboard = Chip8Keyboard();
      (document.getElementById('container')).appendChild(keyboard.getHtml());
      chip8 = Chip8();
      chip8.setKeyboard(keyboard);
      onChange = function(text) {
        var ex;
        clearMarker();
        if (text.length === 0) {
          editor.getSession().setAnnotations([]);
        } else {
          try {
            assembler.assemble(text);
            if (errorLine !== null) {
              editor.getSession().setAnnotations([]);
              errorLine = null;
            }
          } catch (_error) {
            ex = _error;
            if (ex.coords != null) {
              errorLine = ex.coords.line;
              editor.getSession().setAnnotations([
                {
                  row: errorLine,
                  text: ex.message,
                  type: 'error'
                }
              ]);
            }
          }
        }
      };
      setupEditor = function() {
        editor = ace.edit('editor');
        editor.getSession().setMode('ace/mode/chip8');
        editor.setTheme('ace/theme/monokai');
        editor.on('input', function() {
          return onChange(editor.getValue());
        });
      };
      setupEditor();
      getEmulatorState = function() {
        var I, programCounter, registers, stack, stackPointer;
        programCounter = chip8.getProgramCounter();
        stackPointer = chip8.getStackPointer();
        I = chip8.getI();
        registers = Array.prototype.slice.call(chip8.getRegisters(), 0);
        stack = Array.prototype.slice.call(chip8.getStack(), stackPointer);
        return {
          programCounter: programCounter,
          registers: registers,
          stackPointer: stackPointer,
          I: I,
          stack: stack
        };
      };
      loadSample = function(sampleName) {
        return $http.get("samples/" + sampleName + ".chip8", {
          responseType: 'text'
        }).success((function(_this) {
          return function(source) {
            return editor.setValue(source, -1);
          };
        })(this));
      };
      loadSample('sprites');
      clearMarker = function() {
        if (marker != null) {
          editor.getSession().removeMarker(marker);
        }
        marker = null;
      };
      this.clearMarker = clearMarker;
      this.updateMarker = function() {
        var line, range;
        this.clearMarker();
        if (lineMapping != null) {
          line = lineMapping.get(this.emulatorState.programCounter);
          if (line != null) {
            range = new Range(line, 0, line, 100);
            marker = editor.getSession().addMarker(range, 'active-line', 'fullLine');
          }
        }
      };
      this.updateVideo = function() {
        setVideoData(chip8.getVideo());
        return draw();
      };
      this.updateEmulatorState = function() {
        return this.emulatorState = getEmulatorState();
      };
      this.startMainLoop = function() {
        var mainLoop;
        if (rafId != null) {
          return;
        }
        mainLoop = (function(_this) {
          return function() {
            var i, _i;
            for (i = _i = 0; 0 <= TICKS_PER_FRAME ? _i < TICKS_PER_FRAME : _i > TICKS_PER_FRAME; i = 0 <= TICKS_PER_FRAME ? ++_i : --_i) {
              chip8.tick();
            }
            _this.updateEmulatorState();
            if (!$scope.$$phase) {
              $scope.$apply();
            }
            _this.updateVideo();
            rafId = requestAnimationFrame(mainLoop);
          };
        })(this);
        mainLoop();
      };
      this.stopMainLoop = function() {
        cancelAnimationFrame(rafId);
        rafId = null;
      };
      this.start = function() {
        if (this.status === 'idle') {
          this.reset();
        }
        this.status = 'running';
        this.clearMarker();
        this.startMainLoop();
      };
      this.pause = function() {
        this.status = 'paused';
        this.stopMainLoop();
        this.updateMarker();
      };
      this.stop = function() {
        this.status = 'idle';
        this.stopMainLoop();
      };
      this.reset = function() {
        var ex, instructions, text, _ref1;
        this.stop();
        text = editor.getValue();
        if (text.length) {
          try {
            _ref1 = assembler.assemble(text), instructions = _ref1.instructions, lineMapping = _ref1.lineMapping;
            chip8.load(instructions);
          } catch (_error) {
            ex = _error;
          }
        }
        chip8.reset();
        this.updateEmulatorState();
        this.updateVideo();
        this.updateMarker();
      };
      this.reset();
      this.step = function() {
        if (this.status === 'idle') {
          this.reset();
        }
        this.status = 'paused';
        chip8.tick();
        this.updateEmulatorState();
        this.updateVideo();
        this.updateMarker();
      };
    }
  ]);

}).call(this);
