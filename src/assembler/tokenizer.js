// Generated by CoffeeScript 1.8.0
(function() {
  'use strict';
  var Chip8Tokenizer;

  Chip8Tokenizer = function(rawString) {
    var chop, chopComment, chopIdentifier, chopNumberBin, chopNumberDec, chopNumberHex, end, identifier, label, newLine, number, numberBin, numberDec, numberHex, raise;
    number = function(base) {
      return function(raw, coords) {
        return {
          type: 'number',
          value: parseInt(raw, base),
          coords: coords
        };
      };
    };
    numberDec = number(10);
    numberHex = number(16);
    numberBin = number(2);
    identifier = function(raw, coords) {
      return {
        type: 'identifier',
        value: raw,
        coords: coords
      };
    };
    label = function(raw, coords) {
      return {
        type: 'label',
        value: raw,
        coords: coords
      };
    };
    newLine = function(coords) {
      return {
        type: 'newline',
        coords: coords
      };
    };
    end = function(coords) {
      return {
        type: 'end',
        coords: coords
      };
    };
    raise = function(message, coords) {
      var error;
      error = Error(message);
      error.coords = coords;
      throw error;
    };
    chopNumberDec = function(string) {
      var current, _ref;
      string.setMarker();
      while (('0' <= (_ref = string.getCurrent()) && _ref <= '9')) {
        string.advance();
      }
      current = string.getCurrent();
      if (current !== ' ' && current !== '\n') {
        raise("Unexpected character '" + current + "'", string.getCoords());
      }
      return numberDec(string.getMarked(), string.getCoords());
    };
    chopNumberHex = function(string) {
      var current, rawNumber, _ref, _ref1;
      string.advance();
      string.advance();
      string.setMarker();
      while (('0' <= (_ref = string.getCurrent()) && _ref <= '9') || ('A' <= (_ref1 = string.getCurrent()) && _ref1 <= 'F')) {
        string.advance();
      }
      current = string.getCurrent();
      if (current !== ' ' && current !== '\n') {
        raise("Unexpected character '" + current + "'", string.getCoords());
      }
      rawNumber = string.getMarked();
      if (rawNumber.length === 0) {
        raise("Encountered malformed number", string.getCoords());
      }
      return numberHex(rawNumber, string.getCoords());
    };
    chopNumberBin = function(string) {
      var current, rawNumber, _ref;
      string.advance();
      string.advance();
      string.setMarker();
      while (('0' <= (_ref = string.getCurrent()) && _ref <= '1')) {
        string.advance();
      }
      current = string.getCurrent();
      if (current !== ' ' && current !== '\n') {
        raise("Unexpected character '" + current + "'", string.getCoords());
      }
      rawNumber = string.getMarked();
      if (rawNumber.length === 0) {
        raise("Encountered malformed number", string.getCoords());
      }
      return numberBin(rawNumber, string.getCoords());
    };
    chopIdentifier = function(string) {
      var _ref, _ref1, _ref2;
      string.setMarker();
      while (('a' <= (_ref = string.getCurrent()) && _ref <= 'z') || ('A' <= (_ref1 = string.getCurrent()) && _ref1 <= 'Z') || ('0' <= (_ref2 = string.getCurrent()) && _ref2 <= '9')) {
        string.advance();
      }
      if (string.getCurrent() === ':') {
        string.advance();
        return label(string.getMarked(-1), string.getCoords());
      } else {
        return identifier(string.getMarked(), string.getCoords());
      }
    };
    chopComment = function(string) {
      while (string.getCurrent() !== '\n' && string.hasNext()) {
        string.advance();
      }
    };
    chop = function(string) {
      var currentChar, next, tokens;
      tokens = [];
      while (string.hasNext()) {
        currentChar = string.getCurrent();
        if (('1' <= currentChar && currentChar <= '9')) {
          tokens.push(chopNumberDec(string));
        } else if (currentChar === '0') {
          next = string.getNext();
          switch (next) {
            case 'x':
              tokens.push(chopNumberHex(string));
              break;
            case 'b':
              tokens.push(chopNumberBin(string));
              break;
            default:
              tokens.push(chopNumberDec(string));
          }
        } else if (('a' <= currentChar && currentChar <= 'z') || ('A' <= currentChar && currentChar <= 'F')) {
          tokens.push(chopIdentifier(string));
        } else if (currentChar === ';') {
          chopComment(string);
        } else if (currentChar === '\n') {
          tokens.push(newLine(string.getCoords()));
          string.advance();
        } else {
          string.advance();
        }
      }
      tokens.push(end(string.getCoords()));
      return tokens;
    };
    return chop(iterableString(rawString));
  };

  window.Chip8Tokenizer = Chip8Tokenizer;

}).call(this);
